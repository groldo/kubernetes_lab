# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'
server          = ["main01", "main02", "main03", "worker01", "worker02", "worker03", "registry"]
box               = "bento/ubuntu-22.04"
vm_memory         = 2048
vm_cpus           = 2
vm_main_memory    = 4096
vm_main_cpus      = 4

$docker_install = <<SCRIPT
echo "Installing Docker..."
sudo apt-get update
sudo apt-get remove docker docker-engine docker.io
echo '* libraries/restart-without-asking boolean true' | sudo debconf-set-selections
sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg |  sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository \
      "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) \
      stable"
sudo apt-get update
sudo apt-get install -y docker-ce
# Restart docker to make sure we get the latest version of the daemon if there is an upgrade
sudo service docker restart
# Make sure we can actually use docker as the vagrant user
sudo usermod -aG docker vagrant
sudo docker --version
SCRIPT

$ansible_install = <<SCRIPT
echo -e "vagrant\nvagrant" | sudo passwd vagrant
export DEBIAN_FRONTEND=noninteractive
ansible --version || (  
    sudo apt-get -y purge python2.7 python-minimal
    sudo apt-get update && sudo apt-get -q --option \"Dpkg::Options::=--force-confold\" --assume-yes upgrade -y -qq
    sudo -E apt-get -q --option \"Dpkg::Options::=--force-confold\" --assume-yes install -y -qq python3-pip     
    sudo pip3 install ansible 
)
SCRIPT

serverip = 1
workerip = 1

ENV["VAGRANT_EXPERIMENTAL"]="1"
Vagrant.configure("2") do |config|
  server.each do |host|
    config.vm.define host do |machine|

      machine.vm.boot_timeout = 200
      machine.vm.box = box
      machine.vm.hostname = host


      # ip config
      if host.match(/main/)
        machine.vm.provider "virtualbox" do |v|
          v.memory = vm_main_memory
          v.cpus = vm_main_cpus
        end
        # https://sleeplessbeastie.eu/2021/05/10/how-to-define-multiple-disks-inside-vagrant-using-virtualbox-provider/
        machine.vm.disk :disk, size: "100GB", name: "ceph"
        machine.vm.network "private_network", ip: "192.168.60.1#{serverip}"
        serverip += 1
      end

      if host.match(/worker/)
        machine.vm.provider "virtualbox" do |v|
          v.memory = vm_memory
          v.cpus = vm_cpus
        end
        machine.vm.network "private_network", ip: "192.168.60.2#{workerip}"
        workerip += 1
      end

      if host.match(/registry/)
        machine.vm.provider "virtualbox" do |v|
          v.memory = vm_memory
          v.cpus = vm_cpus
        end
        machine.vm.network "private_network", ip: "192.168.60.9"
      end

      # virtualbox config
      machine.vm.provider :virtualbox do |vb|
        vb.gui = false
        vb.customize ["modifyvm", :id, "--accelerate3d", "off"]
        vb.customize ["modifyvm", :id, "--vrde", "off"]
      end

      # Increase memory for VMware
      ["vmware_fusion", "vmware_workstation"].each do |p|
        machine.vm.provider p do |v|
          v.vmx["memsize"] = vm_memory
        end
      end

      machine.ssh.username = "vagrant"
      machine.ssh.insert_key = "false"

      machine.vm.provision "file", source: "~/.ssh/id_rsa", destination: "~/.ssh/id_rsa"
      machine.vm.provision "file", source: "~/.ssh/id_rsa.pub", destination: "~/.ssh/id_rsa.pub"

      machine.vm.provision "shell", privileged: false, inline: "sudo resolvectl dns eth0 1.1.1.1"
      machine.vm.provision "shell", privileged: false, inline: "sudo resolvectl dns eth1 1.1.1.1"
      machine.vm.provision "shell", privileged: false, inline: "sudo sed -i 's/#DNS=/DNS=1.1.1.1/g' /etc/systemd/resolved.conf"
      machine.vm.provision "shell", privileged: false, inline: "sudo systemctl restart systemd-resolved"

      if host.match(/registry/)
        machine.vm.provision "shell", inline: $docker_install, privileged: false
      end

      machine.vm.provision "shell", inline: $ansible_install, privileged: false

    end
  end
end
