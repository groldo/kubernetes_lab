---
- name: install docker py
  become: true
  pip:
    name:
      - docker
      - docker-compose

- name: create docker-registry project directory
  become: true
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  loop:
    - "{{ all_registry__project_dir }}/storage"
    - "{{ all_registry__project_dir }}/images"
    - "{{ all_registry__project_dir }}/certs"

- name: copy certificates to registry
  become: true
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  loop:
    - src: "certs/{{ all_registry__domain }}/{{ all_registry__domain }}.crt"
      dest: "{{ all_registry__project_dir }}/certs"
      mode: "0644"
    - src: "certs/{{ all_registry__domain }}/{{ all_registry__domain }}.key"
      dest: "{{ all_registry__project_dir }}/certs"
      mode: "0600"
    - src: "certs/ca.crt"
      dest: "{{ all_registry__project_dir }}/certs"
      mode: "0644"

- name: create directory for registry ca certificate
  become: true
  file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - '/etc/docker/certs.d/{{ all_registry__domain }}'

- name: copy ca certificate to docker folder
  become: true
  copy:
    src: "{{ all_registry__project_dir }}/certs/ca.crt"
    dest: "/etc/docker/certs.d/{{ all_registry__domain }}"
    mode: 0600
    remote_src: true
  notify:
    - restart docker daemon

- name: get docker registry image
  block:
    - name: read docker registry image
      become: true
      docker_image:
        name: registry:2
        source: load
        force_source: true
        load_path: "{{ all_registry__project_dir }}/images/registry~2.tar.gz"
  rescue:
    - name: pull and save docker registry image
      become: true
      docker_image:
        name: registry:2
        source: pull
        force_source: true
        archive_path: "{{ all_registry__project_dir }}/images/registry~2.tar.gz"
      run_once: true

- name: template out docker registry configuration
  become: true
  template:
    src: "templates/docker-compose.yml.j2"
    dest: "{{ all_registry__project_dir }}/docker-compose.yml"
    mode: 0644

- name: start docker registry service
  become: true
  docker_compose:
    project_src: "{{ all_registry__project_dir }}"

- name: read, tag and push all images to local-registry
  register: result
  become: true
  docker_image:
    name: "{{ item }}"
    repository: "{{ all_all__docker_registry }}/{{ item.split('/') | last }}"
    push: true
    source: load
    force_source: true
    force_tag: true
    load_path: '{{ all_registry__project_dir }}/images/{{ item.split("/") |
      last |
      replace(":","~") }}.tar.gz'
  with_items: "{{ container_images }}"
  run_once: true
  ignore_errors: true
  delegate_to: registry
  when: not all_registry__skip_images

- name: pull, save, tag and push missing images to local-registry
  register: result
  become: true
  docker_image:
    name: "{{ item.item }}"
    repository: "{{ all_all__docker_registry }}/{{ item.item.split('/') | last }}"
    push: true
    source: pull
    force_source: true
    force_tag: true
    archive_path: '{{ all_registry__project_dir }}/images/{{ item.item.split("/") |
      last |
      replace(":","~") }}.tar.gz'
  with_items: '{{ result.results | selectattr("failed") }}'
  loop_control:
    label: "{{ item.item }}"
  retries: 5
  until: result is succeeded
  run_once: true
  delegate_to: registry
  when: not all_registry__skip_images
